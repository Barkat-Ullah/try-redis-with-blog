model Blogs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  slug        String   @unique
  isDeleted   Boolean  @default(false)
  tags        String[]
  views       Int      @default(0)
  likes       Int      @default(0)
  published   Boolean  @default(false)

  userId   String    @db.ObjectId
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([published])
  @@index([createdAt])
  @@map("blogs")
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isEdited  Boolean @default(false)
  isDeleted Boolean @default(false)

  // Blog relation
  blogId String @db.ObjectId
  blog   Blogs  @relation(fields: [blogId], references: [id], onDelete: Cascade)

  // User who wrote the comment
  userId String @db.ObjectId
  user   User   @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  // Reply system (self-relation)
  parentId String?   @db.ObjectId
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("comments")
}
